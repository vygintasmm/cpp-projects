// Minesw.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include<random>
#include <Windows.h>
#include<conio.h>

char** game_map;
int** hidden_map;
int real_bombs_left;




class MineSweeper
{
public:
    int lenght;
    int width;
    int bombs;
    int hidden_width;
    int hidden_lenght;

    MineSweeper(int lg, int wd, int bb) {
        this->lenght = lg;
        this->width = wd;
        this->bombs = bb;
        this->hidden_lenght = lenght+2;
        this->hidden_width = width + 2;
    }
    

    void generate_maps() {
        game_map = new char* [lenght];
        for (int i = 0; i < lenght; ++i) {
            game_map[i] = new char[width];
        }
        for (int i = 0; i < lenght; ++i) {
            for (int j = 0; j < width; ++j) {
                game_map[i][j] = '?';
            }
        }
    }



    void generate_hidden_map() {
        hidden_map = new int* [hidden_lenght];
        for (int i = 0; i < hidden_lenght; ++i) {
            hidden_map[i] = new int[hidden_width];
        }
        for (int i = 0; i < hidden_lenght; ++i) {
            for (int j = 0; j < hidden_width; ++j) {
                hidden_map[i][j] = 0;
            }
        }


        std::random_device rd;
        std::mt19937 gen(rd());
        for (int i = 0; i < bombs; ++i) {
            std::uniform_int_distribution<> distr(1, hidden_lenght - 2);
            int firstc = distr(gen);
            std::uniform_int_distribution<> distrok(1, hidden_width - 2);
            int secondc = distrok(gen);
            hidden_map[firstc][secondc] = 9;
        }
    }

    void add_numbers() {
        for (int i = 1; i < hidden_lenght - 1; ++i) {
            for (int j = 1; j < hidden_width - 1; ++j) {
                int bomb_count = 0;
                if (hidden_map[i][j] == 0) {
                    if (hidden_map[i][j - 1] == 9)bomb_count += 1;
                    if (hidden_map[i][j + 1] == 9)bomb_count += 1;
                    if (hidden_map[i - 1][j] == 9)bomb_count += 1;
                    if (hidden_map[i + 1][j] == 9)bomb_count += 1;
                    if (hidden_map[i - 1][j - 1] == 9)bomb_count += 1;
                    if (hidden_map[i + 1][j + 1] == 9)bomb_count += 1;
                    if (hidden_map[i + 1][j - 1] == 9)bomb_count += 1;
                    if (hidden_map[i - 1][j + 1] == 9)bomb_count += 1;
                    hidden_map[i][j] = bomb_count;
                }
                else {
                    hidden_map[i][j] = 9;
                }
                
            }
        }
    }


    void show_game_map() {
        for (int i = 0; i < lenght; ++i) {
            for (int j = 0; j < width; ++j) {
                std::cout << game_map[i][j];
            }
            std::cout << std::endl;
        }
    }

    void show_hidden() {
        for (int i = 1; i < hidden_lenght-1; ++i) {
            for (int j = 1; j < hidden_width-1; ++j) {
                std::cout << hidden_map[i][j];
            }
            std::cout << std::endl;
        }
    }



};



int main()
{
    

    while (true) {
        std::cout << "noredami pradeti spauskite F" << std::endl;
        std::cout << "noredami iseiti spauskite C" << std::endl;

        char answer;
        std::cin >> answer;
        if (answer == 'c')break;
        else if (answer == 'f') {
            std::cout << "pasirinkite zaidimo sudetinguma: " << std::endl;
            std::cout << "lengvas" << std::endl;
            std::cout << "vidutinis" << std::endl;
            std::cout << "sunkus" << std::endl;

            std::string pasirinkimas;
            std::cin >> pasirinkimas;
            int l, w, b;
            if (pasirinkimas == "vidutinis") {
                l = 10;
                w = 20;
                b = 30;
                real_bombs_left = 30;
            }
            else if (pasirinkimas == "sunkus") {
                l = 20;
                w = 35;
                b = 120;
                real_bombs_left = 120;
            }
            else {
                l = 8;
                w = 10;
                b = 22;
                real_bombs_left = 310;
            }

            MineSweeper game(l, w, b);
            game.generate_maps();
            game.generate_hidden_map();
            game.add_numbers();
            
            game.show_game_map();

            while (true) {

                if (real_bombs_left == 0) {
                    std::cout << "Laimejote!" << std::endl;
                    break;
                }
                std::cout << "noredami pazymeti bomba iveskite zodzius 'radau bomba'" << std::endl;
                
                std::cout << std::endl;
                std::cout << "iveskite koordinates: " << std::endl;
                std::string param1;
                std::string param2;
                std::cin >> param1 >> param2;

                if (param1 == "radau" && param2 == "bomba") {
                    std::cout << "iveskite bombos koordinates" << std::endl;
                    int x, y;
                    std::cin >> x >> y;
                    if (hidden_map[x][y] == 9) {
                        real_bombs_left -= 1;
                    }
                    if (game_map[x][y] == '?')game_map[x][y] = 'X';
                    else if (game_map[x][y] == 'X')game_map[x][y] = '?';
                    system("cls");
                    game.show_game_map();
                }
                else {
                    int x, y;
                    int hx, hy;
                    x = atoi(param1.c_str());
                    y = atoi(param2.c_str());
                    hx = x + 1;
                    hy = y + 1;
                    if (hidden_map[hx][hy] == 9) {
                        system("cls");
                        std::cout << "pralaimejote" << std::endl;
                        game.show_hidden();
                        break;
                    }
                    else if (hidden_map[hx][hy] != 0) {
                        system("cls");
                        if (hidden_map[hx][hy] == 1)game_map[x][y] = '1';
                        else if(hidden_map[hx][hy] == 2)game_map[x][y] = '2';
                        else if (hidden_map[hx][hy] == 3)game_map[x][y] = '3';
                        else if (hidden_map[hx][hy] == 4)game_map[x][y] = '4';
                        else if (hidden_map[hx][hy] == 5)game_map[x][y] = '5';
                        else if (hidden_map[hx][hy] == 6)game_map[x][y] = '6';
                        else if (hidden_map[hx][hy] == 7)game_map[x][y] = '7';
                        else if (hidden_map[hx][hy] == 8)game_map[x][y] = '8';

                        game.show_game_map();
                    }
                    else {
                        system("cls");
                        game_map[x][y] = '0';
                        game.show_game_map();
                    }
                }
            }
            

        }
    }
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
